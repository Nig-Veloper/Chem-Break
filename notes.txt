Tasks

1) Auth setup 

2) Form Designs
TODO: Structure pages and make dummy endpoints for each page
[
    1) Login
    2) Homepage
    3) Add Breakage Page
    4) View Breakage Page
    5) Print Report Page
    6) Apparatus Page. (Add, Edit, Delete)
]

3) Database Design
TODO: Test the database design
Usage Scenarios:
{
    i) Creating a new breakage record without a student_id
    ii) Creating a new breakage record with a student_id (student_id is already present in the database)
}
(i) = input, (g) = generated
[
    User Table (admin login)
        {
            id
            username
            password
        }

    --------------------------------------------------------------
    // Merge "Breakage Table" and "Student Table" while taking input from the user    
    Breakage Table
        {
            breakage_id (g)
            date (g)
            apparatus_id (i)
            quantity (i)
            student_unique_id (g)
            total_price (g)
        }

    Student Table
        {
            student_id (g)
            unique_id (eg : FY29Y23 : FY = First Year, 29 = Roll No, Y = Year 2023) (g)
            roll_no (i)
            class(fy, sy, ty) (i)
            section(default=Chemistry) (i)
        }
    --------------------------------------------------------------

    Apparatus Table
        {
            apparatus_id (g)
            name (i)[eg: Bunsen Burner, Beaker, Test Tube , etc.]
            size (i)[eg: 100ml, 250ml, 500ml, 1L, etc.]
            price (i) [eg: 100, 200, 300, etc.]
        }

    Records Table (g)
        {
            record_id
            message ( message is generated from "breakage_table" output, contains apparatus and quantity )
            student_unique_id
            date
        }

    Bank Table (g)
        {
            id
            student_unique_id
            amount
        }
]

* Creating a Records View 
[
    {
        student[unique_id, class, roll_no, section],
        breakage[]
    }
]

4) Backend Api
TODO: Create Dummy endpoints for each page
[
    1) Add Breakage
    {
        /add-breakage [POST],
        /get-breakage [GET],
    }
    2) Print Report
    {
        /print-report [GET],
    }
    3) Apparatus
    {
        /add-apparatus [POST],
        /get-apparatus [GET],
        /edit-apparatus [POST],
        /delete-apparatus [POST],
    }
]

5) Figure out a way to print data in xls format from the backend (database side)
[
    1) Report Types 
        {
            i) Report of each class (fy, sy, ty)
            {
                - Sorting based on class
                - Sortion based on a range of dates
            },

            ii) Report of who broke what apparatus (records table)
            {
                - Sorting based on class
                - Sorting based on a range of dates
            }
        }
]

6) Functionality
[
    1) Login
    2) Add Breakage
    3) View Breakage
    4) Print Report
    5) Add Apparatus
    6) Edit Apparatus
    7) Delete Apparatus
]


Flow of the app
Only Degree College Teachers can use this app
1) Teacher logs in
Modules shown to the teacher
    a) Add Breakage
    b) Edit Apparatus Data
    c) View Breakage
    d) Print Report

a) Add Breakage
    1) Teacher enters the date, item, quantity, student_id
    2) Teacher clicks on submit
    3) Data is stored in the database

b) Edit Apparatus Data
    1) Teacher can add, edit, delete apparatus data

c) View Breakage
    1) Teacher can view the breakage data

d) Print Report
    1) Teacher can print the breakage data in xls format 


Route Handling Flow
[
    1) login 
    {
        - goes to login
        - success -> goes to homepage
        - failure -> goes to login
    }
    2) homepage 
    {
        - list all modules 
        [ Breakage, Apparatus, Print Report, Records ]
        - on click of each module -> goes to that module
    }
]